// TL;DR: mod support / other mods can rebalance EmbeddedKOSKirkuits by patching
// "@EMBEDDED_KOS_KIRKUITS:BEFORE[EmbeddedKOSKirkuits] { ... }", should use
// plain "NEEDS[EmbeddedKOSKirkuits]" to set markers, and may use "LAST[EmbeddedKOSKirkuits]"
// to change the modules generated by EmbeddedKOSKirkuits
//
// Patch order in detail
// - Initial setup is done as an insert node for EMBEDDED_KOS_KIRKUITS.
//   Don't define a node with that name yourself.
// - Values within the initial setup can be patched inside an
//   "@EMBEDDED_KOS_KIRKUITS { ... }" block in any phase before "LAST",
//   and must be done before any of the values are accessed.
//   Best phase to do this is "BEFORE[EmbeddedKOSKirkuits]"
// - Set markers on parts using "NEEDS[EmbeddedKOSKirkuits]" and
//   optinally any "BEFORE", "FOR" or "AFTER" directives to sort the
//   patch order for your needs. Typical usage for a mod support patch
//   is "NEEDS[EmbeddedKOSKirkuits]:AFTER[TheModIWantToSupport]"
// - EmbeddedKOSKirkuits uses "LAST[@EmbeddedKOSKirkuits]" to actually
//   add the required modules to the marked parts.
//   Do not reference this phase or the "@EmbeddedKOSKirkuits" pseudo
//   mod name in your own mods - this is purely for EmbeddedKOSKirkuits
//   internal usage.
// - If you need to access the modules generated in the "LAST[@EmbeddedKOSKirkuits]"
//   phase, use "LAST[EmbeddedKOSKirkuits]" (without the "@") - this is guaranteed
//   to run after EmbeddedKOSKirkuits added the modules (and this is actually the
//   reason that "@EmbeddedKOSKirkuits" exists at all)
// - Cleanup of leftover markers and the EMBEDDED_KOS_KIRKUITS config node
//   is done in the "FINAL" phase to ensure that everything in "LAST[*]" still has
//   access to the markers.
//

// Tweakables for the individual processor modules
EMBEDDED_KOS_KIRKUITS {

    Default_kOSProcessor_type    = default
    Default_kOSProcessor_include = optional_default_off

    // Early game processor. Weak, expensive, inefficient, massive.
    PROCESSOR {
        name = early_basic
        title = SAG-LT6a
        diskSpace = 500
        ECPerBytePerSecond = 0.00001
        ECPerInstruction = 0.00008
        baseDiskSpace = 500
        diskSpaceCostFactor = 0.0008
        baseModuleCost = 1200
        diskSpaceMassFactor = 0.00000048829
        baseModuleMass = 0.060
    }
    // Early game "high end" processor. 3 times
    // the storage for only four times the price,
    // but correspondingly higher mass and energy
    // consumption
    PROCESSOR {
        name = early_advanced
        title = SAG-LT6b
        diskSpace = 1500
        ECPerBytePerSecond = 0.00001
        ECPerInstruction = 0.00008
        baseDiskSpace = 1500
        diskSpaceCostFactor = 0.0008
        baseModuleCost = 3600
        diskSpaceMassFactor = 0.00000048829
        baseModuleMass = 0.120
    }
    // Standard option, mid game. Embedded version of the
    // "KR-2042 b Scriptable Control System", with the same
    // setting (apart from mass - the builtin version is only
    // half as massive because it does not need the extra
    // housing)
    PROCESSOR {
        name = default
        title = KR-2042 b
        diskSpace = 5000
        ECPerBytePerSecond = 0
        ECPerInstruction = 0.000004
        baseDiskSpace = 5000
        diskSpaceCostFactor = 0.0244140625
        baseModuleCost = 1200
        diskSpaceMassFactor = 0.0000000048829
        baseModuleMass = 0.050
    }
    // Small contemporary or near future option, late mid game.
    // Inexpensive, does not need much resource wise,
    // but with limited performance. Think "Microcontroller".
    PROCESSOR {
        name = modern_small
        title = OV7-3CM Micro
        diskSpace = 1500
        ECPerBytePerSecond = 0
        ECPerInstruction = 0.0000004
        baseDiskSpace = 1500
        diskSpaceCostFactor = 0.0244140625
        baseModuleCost = 300
        diskSpaceMassFactor = 0.00000000048829
        baseModuleMass = 0.001
    }
    // Allround contemporary or near future option, late mid game.
    // A bit more expensive, not quite as effective as the "small",
    // but with limited performance. Think "Modern Embedded Computer".
    // It *does* use twice as much electricity as the microcontroller,
    // though, as an added incentive to keep it small.
    PROCESSOR {
        name = modern_medium
        title = OV7-3CS Standard
        diskSpace = 5000
        ECPerBytePerSecond = 0
        ECPerInstruction = 0.0000008
        baseDiskSpace = 5000
        diskSpaceCostFactor = 0.0244140625
        baseModuleCost = 1200
        diskSpaceMassFactor = 0.00000000048829
        baseModuleMass = 0.005
    }
    // Advanced contemporary or near future option, late mid game.
    // Double the storage for only 2 times the mass, but three times the price
    PROCESSOR {
        name = modern_large
        title = OV7-3CA Advanced
        diskSpace = 10000
        ECPerBytePerSecond = 0
        ECPerInstruction = 0.0000008
        baseDiskSpace = 10000
        diskSpaceCostFactor = 0.0244140625
        baseModuleCost = 3600
        diskSpaceMassFactor = 0.00000000048829
        baseModuleMass = 0.010
    }
    // Far Future option, late game. Same mass as the small microcontroller,
    // but effectively unlimited storage at no extra cost and mass, and uses
    // even less electricity.
    // Don't even think about it, just slap it in.
    PROCESSOR {
        name = unlimited
        title = UCM-3MA Module
        diskSpace = 4000000
        ECPerBytePerSecond = 0
        ECPerInstruction = 0.00000004
        baseDiskSpace = 1000000
        diskSpaceCostFactor = 0
        baseModuleCost = 300
        diskSpaceMassFactor = 0
        baseModuleMass = 0.0001
    }
}

@EMBEDDED_KOS_KIRKUITS:FOR[@EmbeddedKOSKirkuits] {
    // Empty pseudo patch just to introduce the "@EmbeddedKOSKirkuits" name
}

////
//// Sanity checks, set fallback values when B9PartSwitch is not installed,
//// Add a default Embedded_kOSProcessor_type when a processor should be included
//// but no type is set explicitly
////
// Sanity checks: Drop toplevel markers from all parts that already have a MODULE[kOSProcessor]
@PART:HAS[MODULE[kOSProcessor],#Embedded_kOSProcessor_include[*]]:LAST[@EmbeddedKOSKirkuits] {
    -Embedded_kOSProcessor_include = deleted
}
@PART:HAS[MODULE[kOSProcessor],#Embedded_kOSProcessor_type[*]]:LAST[@EmbeddedKOSKirkuits] {
    -Embedded_kOSProcessor_type = deleted
}
// Fallbacks when B9PartSwitch is missing
@PART:HAS[#Embedded_kOSProcessor_include[optional_default_on]]:NEEDS[!B9PartSwitch]:LAST[@EmbeddedKOSKirkuits] {
    @Embedded_kOSProcessor_include = always
}
@PART:HAS[#Embedded_kOSProcessor_include[optional_default_off]]:NEEDS[!B9PartSwitch]:LAST[@EmbeddedKOSKirkuits] {
    @Embedded_kOSProcessor_include = never
    -Embedded_kOSProcessor_type = deleted
}
// Set default Embedded_kOSProcessor_type if none has been specified
@PART:HAS[~Embedded_kOSProcessor_type,~Embedded_kOSProcessor_include[never],#Embedded_kOSProcessor_include]:LAST[@EmbeddedKOSKirkuits] {
    Embedded_kOSProcessor_type = #$@EMBEDDED_KOS_KIRKUITS/Default_kOSProcessor_type$
}

////
//// Add MODULE[kOSProcessor] to all parts that should include one and
//// configure the modules (the congfigure step also takes care of modules
//// and upgrade nodes with an explicitly added Embedded_kOSProcessor_type)
////
@PART:HAS[#Embedded_kOSProcessor_include,~Embedded_kOSProcessor_include[never]]:NEEDS[kOS]:LAST[@EmbeddedKOSKirkuits] {
    MODULE
    {
        name = kOSProcessor
        Embedded_kOSProcessor_type = #$/Embedded_kOSProcessor_type$
    }
}
@PART:HAS[@MODULE[kOSProcessor]:HAS[#Embedded_kOSProcessor_type]]:LAST[@EmbeddedKOSKirkuits] {
    // Set the processor data. Needs to be repeated for each variant because recursive
    // variable references like #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[#$/Embedded_kOSProcessor_type$]/title$
    // don't work im MM
    @MODULE[kOSProcessor]:HAS[#Embedded_kOSProcessor_type[early_basic]] {
        %title = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_basic]/title$
        %diskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_basic]/diskSpace$
        %ECPerBytePerSecond = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_basic]/ECPerBytePerSecond$
        %ECPerInstruction = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_basic]/ECPerInstruction$
        %baseDiskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_basic]/baseDiskSpace$
        %diskSpaceCostFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_basic]/diskSpaceCostFactor$
        %baseModuleCost = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_basic]/baseModuleCost$
        %diskSpaceMassFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_basic]/diskSpaceMassFactor$
        %baseModuleMass = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_basic]/baseModuleMass$
    }
    @MODULE[kOSProcessor]:HAS[#Embedded_kOSProcessor_type[early_advanced]] {
        %title = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_advanced]/title$
        %diskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_advanced]/diskSpace$
        %ECPerBytePerSecond = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_advanced]/ECPerBytePerSecond$
        %ECPerInstruction = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_advanced]/ECPerInstruction$
        %baseDiskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_advanced]/baseDiskSpace$
        %diskSpaceCostFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_advanced]/diskSpaceCostFactor$
        %baseModuleCost = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_advanced]/baseModuleCost$
        %diskSpaceMassFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_advanced]/diskSpaceMassFactor$
        %baseModuleMass = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[early_advanced]/baseModuleMass$
    }
    @MODULE[kOSProcessor]:HAS[#Embedded_kOSProcessor_type[default]] {
        %title = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[default]/title$
        %diskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[default]/diskSpace$
        %ECPerBytePerSecond = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[default]/ECPerBytePerSecond$
        %ECPerInstruction = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[default]/ECPerInstruction$
        %baseDiskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[default]/baseDiskSpace$
        %diskSpaceCostFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[default]/diskSpaceCostFactor$
        %baseModuleCost = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[default]/baseModuleCost$
        %diskSpaceMassFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[default]/diskSpaceMassFactor$
        %baseModuleMass = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[default]/baseModuleMass$
    }
    @MODULE[kOSProcessor]:HAS[#Embedded_kOSProcessor_type[modern_small]]{
        %title = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_small]/title$
        %diskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_small]/diskSpace$
        %ECPerBytePerSecond = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_small]/ECPerBytePerSecond$
        %ECPerInstruction = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_small]/ECPerInstruction$
        %baseDiskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_small]/baseDiskSpace$
        %diskSpaceCostFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_small]/diskSpaceCostFactor$
        %baseModuleCost = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_small]/baseModuleCost$
        %diskSpaceMassFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_small]/diskSpaceMassFactor$
        %baseModuleMass = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_small]/baseModuleMass$
    }
    @MODULE[kOSProcessor]:HAS[#Embedded_kOSProcessor_type[modern_medium]] {
        %title = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_medium]/title$
        %diskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_medium]/diskSpace$
        %ECPerBytePerSecond = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_medium]/ECPerBytePerSecond$
        %ECPerInstruction = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_medium]/ECPerInstruction$
        %baseDiskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_medium]/baseDiskSpace$
        %diskSpaceCostFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_medium]/diskSpaceCostFactor$
        %baseModuleCost = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_medium]/baseModuleCost$
        %diskSpaceMassFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_medium]/diskSpaceMassFactor$
        %baseModuleMass = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_medium]/baseModuleMass$
    }
    @MODULE[kOSProcessor]:HAS[#Embedded_kOSProcessor_type[modern_large]] {
        %title = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_large]/title$
        %diskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_large]/diskSpace$
        %ECPerBytePerSecond = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_large]/ECPerBytePerSecond$
        %ECPerInstruction = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_large]/ECPerInstruction$
        %baseDiskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_large]/baseDiskSpace$
        %diskSpaceCostFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_large]/diskSpaceCostFactor$
        %baseModuleCost = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_large]/baseModuleCost$
        %diskSpaceMassFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_large]/diskSpaceMassFactor$
        %baseModuleMass = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[modern_large]/baseModuleMass$
    }
    @MODULE[kOSProcessor]:HAS[#Embedded_kOSProcessor_type[unlimited]] {
        %title = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[unlimited]/title$
        %diskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[unlimited]/diskSpace$
        %ECPerBytePerSecond = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[unlimited]/ECPerBytePerSecond$
        %ECPerInstruction = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[unlimited]/ECPerInstruction$
        %baseDiskSpace = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[unlimited]/baseDiskSpace$
        %diskSpaceCostFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[unlimited]/diskSpaceCostFactor$
        %baseModuleCost = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[unlimited]/baseModuleCost$
        %diskSpaceMassFactor = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[unlimited]/diskSpaceMassFactor$
        %baseModuleMass = #$@EMBEDDED_KOS_KIRKUITS/PROCESSOR[unlimited]/baseModuleMass$
    }
}

////
//// Handle switchable modules and multiple processor options
//// Needs B9PartSwitch
////
// Add a B9PartSwitch module for all switchable processors
@PART:HAS[#Embedded_kOSProcessor_include[optional_default_off]]:NEEDS[kOS,B9PartSwitch]:LAST[@EmbeddedKOSKirkuits] {
   MODULE {
        name = ModuleB9PartSwitch
        moduleID = EmbeddedKOSProcessorSwitch
        SUBTYPE {
            name = NoProcessor
        }
        SUBTYPE {
            name=ProcessorInstalled
        }
   }
}
@PART:HAS[#Embedded_kOSProcessor_include[optional_default_on]]:NEEDS[kOS,B9PartSwitch]:LAST[@EmbeddedKOSKirkuits] {
   MODULE {
        name = ModuleB9PartSwitch
        moduleID = EmbeddedKOSProcessorSwitch
        SUBTYPE {
            name=ProcessorInstalled
        }
        SUBTYPE {
            name = NoProcessor
        }
   }
}
@PART:HAS[#Embedded_kOSProcessor_include[optional_default_*]]:NEEDS[kOS,B9PartSwitch]:LAST[@EmbeddedKOSKirkuits] {
    @MODULE[ModuleB9PartSwitch]:HAS[#moduleID[EmbeddedKOSProcessorSwitch]] {
        switcherDescription = kOS Processor
        switcherDescriptionPlural = kOS Processor Options
        @SUBTYPE[ProcessorInstalled] {
            title = #$../../MODULE[kOSProcessor]/title$
            addedMass = #$../../MODULE[kOSProcessor]/baseModuleMass$
            addedCost = #$../../MODULE[kOSProcessor]/baseModuleCost$
            MODULE {
                IDENTIFIER {
                    name = kOSProcessor
                }
                moduleActive = True
            }
        }
        @SUBTYPE[NoProcessor] {
            title = No kOS Processor
            MODULE {
                IDENTIFIER {
                    name = kOSProcessor
                }
                moduleActive = False
            }
        }
    }
    @MODULE[kOSProcessor] {
        // extra mass and cost is handled by B9PartSwitch
        %baseModuleMass = 0
        %baseModuleCost = 0
    }
}

////
//// Final Cleanup, remove all leftover markers on parts and the
//// EMBEDDED_KOS_KIRKUITS configuration node itself
////
//// Note: We deliberately leave the Embedded_kOSProcessor_type marker
//// on the MODULE[kOSProcessor] itself, because it does not break kOS,
//// and gives kOS scripts the opportunity to check which "processor class"
//// they are running on (potential use case: use this in a kOS "firmware"
//// script to dynamically change CONFIG:IPU to match the "processor
//// class")
////
@PART:HAS[#Embedded_kOSProcessor_include[*]]:FINAL {
    -Embedded_kOSProcessor_include = deleted
}
@PART:HAS[#Embedded_kOSProcessor_type[*]]:FINAL {
    -Embedded_kOSProcessor_type = deleted
}
!EMBEDDED_KOS_KIRKUITS:FINAL {}
